{
  "name": "shp",
  "description": "Convert shapefiles into geoJson without ogr2ogr/GDAL",
  "version": "0.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/yuletide/node-shp"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.6.x",
    "npm": "1.1.x"
  },
  "keywords": [
    "shp",
    "esri",
    "shapefile",
    "geo",
    "geojson",
    "mapping"
  ],
  "devDependencies": {
    "mocha": "~1.4.1",
    "chai": "~1.2.0",
    "sinon": "~1.4.2"
  },
  "author": {
    "name": "Alex Yule",
    "email": "alexy@codeforamerica.org",
    "url": "http://alexyule.com"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "node-shp\n========\n\nNode.js shapefile parser in pure JS\n\nThanks to:\n[vanrijkom](http://code.google.com/p/vanrijkom-flashlibs/)\nvia [RandomEtc](https://github.com/RandomEtc/shapefile-js)\n\n\n##What about shp2json?\n\nUnlike substack's [shp2json](https://github.com/substack/shp2json), this library does not require [gdal](http://www.gdal.org/). Or anything other than `fs`.\n\n\n\nUsage\n===================\nstill in testing stages\n\n\t> npm install shp\n\n   \tvar Shp = require('shp');\n   \tvar shpJson = Shp.readFileSync('path/to/shpfile_base_name');\n   \t// or\n   \tShp.readFile('path', function(error, data){\n\t   \tconsole.log(JSON.stringify(data));\n   \t})\n\nTODO\n====\n - Allow to be run from commandline as executable\n - Tests actually compare equality of results\n - Tests for shapefiles with multiple features\n - Separate out loading of file to allow preloading\n - Proper support for multiPolygons, etc\n\n###Sample Data\nhttp://thematicmapping.org/downloads/world_borders.php CC-BY-SA 3.0\n",
  "readmeFilename": "README.md",
  "_id": "shp@0.0.1",
  "dist": {
    "shasum": "d64fc41e4bcb34282c8f50345ad8aa171bb70a31"
  },
  "_from": "shp@https://github.com/yuletide/node-shp/tarball/master"
}
